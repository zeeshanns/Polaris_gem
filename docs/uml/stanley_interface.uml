@startuml
' Assignment-driven Stanley Controller Structure

class Stanley {
    - rate: rospy.Rate
    - wheelbase: float
    - ackermann_msg: AckermannDrive
    - ackermann_pub: Publisher
    - new_goal_received: bool
    - special_points: list
    - robot_state: str
    - goal_pub: Publisher
    - path_points_x: list
    - path_points_y: list
    - path_points_yaw: list
    - dist_arr: np.array

    + __init__()
    + read_waypoints()
    + get_gem_state()
    + pi_2_pi(angle)
    + waypoint_callback(msg)
    + state_callback(msg)
    + start_stanley()
}

Stanley "1" -- "1" AckermannDrive : uses
Stanley "1" -- "1" Publisher : publishes /gem/ackermann_cmd
Stanley "1" -- "1" Publisher : publishes st/goal_reached
Stanley "1" -- "1" Subscriber : subscribes st/waypoints
Stanley "1" -- "1" Subscriber : subscribes st/robot_state

note right of Stanley
Requirement 2: Code Structure & Flexibility
- Modular class for easy controller swapping
- ROS topics for portability and expansion

Requirement 3: Sensor Data State Management & Error Handling
- Handles robot_state (IDLE, RUNNING, ERROR)
- Stops vehicle if not RUNNING

Requirement 4: Navigation Task Planner
- Receives waypoints dynamically
- Stops for 5 seconds at each waypoint (only once)
end note

@enduml